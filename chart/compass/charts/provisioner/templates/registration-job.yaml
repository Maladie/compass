apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ template "fullname" . }}-registration
subjects:
  - kind: ServiceAccount
    name: {{ template "fullname" . }}-registration
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: [oauth2clients.hydra.ory.sh]
    verbs: [create, get]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-registration
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation ## TODO
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "fullname" . }}-registration
    spec:
      serviceAccountName: {{ template "fullname" . }}-registration
      restartPolicy: Never
      containers:
        - name: {{ template "fullname" . }}-registration
          image: "linkyard/kubectl:1.14.2"
          command:
            - bash
            - -c
            - |
              MAX_RETRIES=60
              DIRECTOR_URL=http://compass-director.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.director.port }}/graphql
              DIRECTOR_HEALTHZ_URL=http://compass-director.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.director.port }}/healthz

              SCOPES="runtime:write runtime:read integration_system:write"
              TOKEN_PAYLOAD='{"scopes": "'${SCOPES}'","tenant":"{{ .Values.global.defaultTenant }}"}'
              ENCODED_TOKEN_PAYLOAD=$(echo -e ${TOKEN_PAYLOAD} | base64 | tr -d \\n)
              INTERNAL_TOKEN="eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.${ENCODED_TOKEN_PAYLOAD//=}."

              # TODO - consider providing this value in charts
              SECRET_NAME="{{ template "fullname" . }}-registration"

              function wait_for_access_to_api_server() {
                local cnt=0
                set +o errexit
                while :
                do
                  kubectl version > /dev/null 2>&1
                  if [[ $? -eq 0 ]]; then
                    echo "Successfully accessed API Server"
                    break
                  else
                    ((cnt++))
                    if (( cnt > $MAX_RETRIES )); then
                      echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                      exit 1
                    fi

                    echo "Cannot access API Server waiting 5s..."
                    sleep 5
                  fi
                done
                set -o errexit
              }

              function director_readiness() {
                local cnt=0
                set +o errexit
                while :
                do
                RESPONSE_CODE=$(curl -k -s "${DIRECTOR_HEALTHZ_URL}" \
                --write-out "%{http_code}\n" --output /dev/null)
                if [[ "$RESPONSE_CODE" == "200" ]]
                then
                  echo "Director ready."
                  break
                else
                  ((cnt++))
                  if (( cnt > $MAX_RETRIES )); then
                    echo "Max retries has been reached (retries $MAX_RETRIES). Exit."
                    exit 1
                  fi

                  echo "Director not ready! StatusCode: '${RESPONSE_CODE}' - waiting 5s..."
                  sleep 5
                fi
                done
                set -o errexit
              }

              function register_provisioner() {
              set +o pipefail
              echo "Compass Provisioner registration as integration system - in progress."

              RESPONSE_BODY=$(curl -k "${DIRECTOR_URL}" \
                -H 'Content-Type: application/json' \
                -H "authorization: Bearer ${INTERNAL_TOKEN}" \
                --data-binary '{
                  "query":"mutation registerIntegrationSystem\ {\n  result: registerIntegrationSystem\(\n    in: { name: \"compass-provisioner\", description: \"Compass Provisioner\" }\n  ) {\n    id\n  }\n}\n"
                }')
              echo $RESPONSE_BODY

              INTEGRATION_SYSTEM_ID=$(echo $RESPONSE_BODY | jq -e '.data .result .id')
              INTEGRATION_SYSTEM_ID="${INTEGRATION_SYSTEM_ID:1:${#INTEGRATION_SYSTEM_ID}-2}"

              cat <<EOF | kubectl apply -f -
              apiVersion: hydra.ory.sh/v1alpha1
              kind: OAuth2Client
              metadata:
                name: {{ template "fullname" . }}-registration-integration-system
                namespace: {{ .Release.Namespace }}
              spec:
                grantTypes:
                - client_credentials
                responseTypes:
                - token
                scope: "${SCOPES}"
                secretName: "${SECRET_NAME}"

              EOF
              echo "Compass Provisioner registration as integration system - finished."
              set -o pipefail
              }

              function kill_proxy_and_exit() {
                echo 'killing pilot-agent...'
                curl -XPOST http://127.0.0.1:15020/quitquitquit
                sleep 4
                exit 0
              }

              echo "Waiting for access to API Server..."
              wait_for_access_to_api_server

              echo "Checking if OAuth2Client exists..."
              
              set +o errexit
              kubectl get oauth2clients.hydra.ory.sh {{ template "fullname" . }}-registration-integration-system -n {{ .Release.Namespace }} > /dev/null 2>&1
              if [[ $? -eq 0 ]]; then
                echo "Compass Provisioner OAuth2Client already exists."
                kill_proxy_and_exit
              fi
              set -o errexit

              director_readiness
              register_provisioner
              kill_proxy_and_exit
